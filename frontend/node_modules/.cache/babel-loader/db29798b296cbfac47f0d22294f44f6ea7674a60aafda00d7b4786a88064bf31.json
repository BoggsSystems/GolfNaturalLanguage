{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\golf-app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport './App.css'; // Make sure to create this file for custom styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [description, setDescription] = useState(\"\");\n  const [parsedInfo, setParsedInfo] = useState(\"\");\n  const [isListening, setIsListening] = useState(false); // State to track if the microphone is listening\n  const [isLoading, setIsLoading] = useState(false); // State for loading indicator\n\n  // Function to handle speech recognition\n  const handleSpeechRecognition = () => {\n    const recognition = new window.webkitSpeechRecognition();\n    recognition.lang = 'en-US';\n    recognition.continuous = true; // Continue listening until stopped\n    recognition.interimResults = false;\n    recognition.onstart = () => {\n      setIsListening(true); // Indicate that the microphone is listening\n    };\n    recognition.onresult = event => {\n      const speechResult = event.results[event.results.length - 1][0].transcript;\n      setDescription(prevDescription => prevDescription + \" \" + speechResult); // Append the result to the description\n    };\n    recognition.onerror = event => {\n      console.error(\"Speech recognition error\", event.error);\n      setIsListening(false); // Stop the listening indicator on error\n    };\n    recognition.onend = () => {\n      setIsListening(false); // Stop the listening indicator when recognition ends\n    };\n    recognition.start();\n  };\n  const handleInputSubmit = async () => {\n    setIsLoading(true); // Show loading indicator\n    setIsListening(false); // Stop the microphone indicator\n    try {\n      const result = await axios.post(\"http://127.0.0.1:5000/api/parse_hole\", {\n        description: description\n      });\n      setParsedInfo(result.data.parsed_info);\n    } catch (error) {\n      console.error(\"Error parsing hole description\", error);\n    } finally {\n      setIsLoading(false); // Hide loading indicator\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"golf-app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"golf-header\",\n      children: \"Golf Round AI Assistant\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"golf-textarea\",\n      placeholder: \"Enter your hole description...\",\n      value: description,\n      onChange: e => setDescription(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleInputSubmit,\n        className: \"golf-submit-button\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSpeechRecognition,\n        className: `golf-microphone-button ${isListening ? 'listening' : ''}`,\n        children: [\"\\uD83C\\uDFA4 \", isListening ? 'Listening...' : 'Use Microphone']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this) // Display spinner while loading\n    , parsedInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"golf-result\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Parsed Hole Information:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        dangerouslySetInnerHTML: {\n          __html: parsedInfo\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"AFVzthoc2lSKLn1LTctj34Mv8+c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","App","_s","description","setDescription","parsedInfo","setParsedInfo","isListening","setIsListening","isLoading","setIsLoading","handleSpeechRecognition","recognition","window","webkitSpeechRecognition","lang","continuous","interimResults","onstart","onresult","event","speechResult","results","length","transcript","prevDescription","onerror","console","error","onend","start","handleInputSubmit","result","post","data","parsed_info","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","onClick","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["C:/Projects/golf-app/frontend/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport './App.css'; // Make sure to create this file for custom styles\n\nconst App = () => {\n  const [description, setDescription] = useState(\"\");\n  const [parsedInfo, setParsedInfo] = useState(\"\");\n  const [isListening, setIsListening] = useState(false); // State to track if the microphone is listening\n  const [isLoading, setIsLoading] = useState(false); // State for loading indicator\n\n  // Function to handle speech recognition\n  const handleSpeechRecognition = () => {\n    const recognition = new window.webkitSpeechRecognition();\n    recognition.lang = 'en-US';\n    recognition.continuous = true; // Continue listening until stopped\n    recognition.interimResults = false;\n\n    recognition.onstart = () => {\n      setIsListening(true); // Indicate that the microphone is listening\n    };\n\n    recognition.onresult = (event) => {\n      const speechResult = event.results[event.results.length - 1][0].transcript;\n      setDescription((prevDescription) => prevDescription + \" \" + speechResult); // Append the result to the description\n    };\n\n    recognition.onerror = (event) => {\n      console.error(\"Speech recognition error\", event.error);\n      setIsListening(false); // Stop the listening indicator on error\n    };\n\n    recognition.onend = () => {\n      setIsListening(false); // Stop the listening indicator when recognition ends\n    };\n\n    recognition.start();\n  };\n\n  const handleInputSubmit = async () => {\n    setIsLoading(true); // Show loading indicator\n    setIsListening(false); // Stop the microphone indicator\n    try {\n      const result = await axios.post(\"http://127.0.0.1:5000/api/parse_hole\", {\n        description: description,\n      });\n\n      setParsedInfo(result.data.parsed_info);\n    } catch (error) {\n      console.error(\"Error parsing hole description\", error);\n    } finally {\n      setIsLoading(false); // Hide loading indicator\n    }\n  };\n\n  return (\n    <div className=\"golf-app-container\">\n      <h1 className=\"golf-header\">Golf Round AI Assistant</h1>\n      <textarea\n        className=\"golf-textarea\"\n        placeholder=\"Enter your hole description...\"\n        value={description}\n        onChange={(e) => setDescription(e.target.value)}\n      />\n      <div className=\"button-group\">\n        <button onClick={handleInputSubmit} className=\"golf-submit-button\">\n          Submit\n        </button>\n        <button onClick={handleSpeechRecognition} className={`golf-microphone-button ${isListening ? 'listening' : ''}`}>\n          ðŸŽ¤ {isListening ? 'Listening...' : 'Use Microphone'}\n        </button>\n      </div>\n\n      {isLoading && (\n        <div className=\"spinner\"></div> // Display spinner while loading\n      )}\n\n      {parsedInfo && (\n        <div className=\"golf-result\">\n          <h2>Parsed Hole Information:</h2>\n          <div dangerouslySetInnerHTML={{ __html: parsedInfo }} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}